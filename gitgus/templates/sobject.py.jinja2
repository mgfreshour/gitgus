"""{{ sobject.label }}."""
# Do not Edit this file.
# This file is generated from the "gitgus dev generate-sobjects" command
#
# Remember, you can always regenerate this file by running the above command.
# If you have made changes to this file, they will be lost.
# Edit template: sobject.py.jinja2

{% if import_date %}
from datetime import date
{% endif %}
from datetime import datetime
{% if import_enum %}
from enum import Enum
{% endif %}
from typing import Any
from typing import Self
from typing import Dict
{% if "approval_layouts" in sobject.urls.dict() %}
from typing import List
{% endif %}
from typing import Optional
from typing import Generator

from pydantic import Field, ConfigDict, computed_field
from ..gus_client import GUSClient
from .sobject_base import SObjectBase, SObjectType

{% for x in sobject.fields_all %}
{% if x.enum_values %}
class {{ x.name_capwords }}Enum(str, Enum):
    """{{ x.label }}."""

    {% for i, x in enumerate(x.enum_values) %}
    {% if x|length > 69 %}
    OPTION_{{ i }} = (
        {% for c in range(0, x|length, 78) %}
        "{{ x[c:c+78] }}"
        {% endfor %}
    )
    {% else %}
    OPTION_{{ i }} = "{{ x }}"
    {% endif %}
    {% endfor %}


{% endif %}
{% endfor %}
class {{ sobject.label_capwords }}(SObjectBase, metaclass=SObjectType):
    """{{ sobject.label }}."""

{% if "approval_layouts" in sobject.urls.dict() %}
    _can_be_approved = True
{% endif %}
    _base_sf_object = "{{ sobject.name }}"

    model_config = ConfigDict(
        title="{{ sobject.name }}",
        validate_assignment=True,
    )

{% for x in sobject.fields_all %}
    {{ x.name_snakecase }}: {{ x.python_type }} = Field(..., alias="{{ x.name }}", title="{{ x.label }}"
        {%- if not x.updateable %}, frozen=True, exclude=True{% endif -%}
    )
{% endfor %}


{% for x in sobject.fields_all %}
    {% if x.reference_to
    and x.name_snakecase + "_name" not in field_names
    and ("_id" not in x.name_snakecase or x.name_snakecase.replace("_id","") not in field_names) %}
    @property
    def {{ x.hydrated_name }}(self):
        return self._get_connected_object_name({{ x.reference_to }}, self.{{ x.name_snakecase }})
    {% endif %}
{% endfor %}

    def __init__(self, **kwargs: Any):
        """
        Initialize Salesforce Object.

        :param **kwargs: keyword arguments
        """
        super().__init__(**kwargs)

    @property
    def web_url(self) -> str:
        """
        Web URL.

        :returns: web url
        """
        return f"https://{GUSClient.instance().sf.sf_instance}/{self.id_}"

    @classmethod
    def get_by_id(cls, id_: str) -> Self:
        """
        Get {{ sobject.label_clean.lower() }}.

        :param id_: Salesforce Object Id
        :returns: {{ sobject.label }} object
        """
        x = GUSClient.instance().sf.__getattr__("{{ sobject.name }}").get(id_)
        return {{ sobject.label_capwords }}(**{"sf": GUSClient.instance().sf, **x})

{% if sobject.can_be_created %}
    @classmethod
    def create(cls, **kwargs: Any) -> Self:
        """
        Create {{ sobject.label_clean.lower() }}.
        :param **kwargs: values for the fields of the {{ sobject.label }} object
        :returns: {{ sobject.label }} object
        :raises RuntimeError: if object creation failed
        """
        lookup = cls._get_field_to_sf_name_dict()
        fields = {lookup[k]: v for k, v in kwargs.items()}
        return cls._create("FeedItem", fields)
{% endif %}


{% if sobject.can_be_updated %}
    @classmethod
    def update(cls, model: Self, headers: Optional[Dict[str, str]] = None) -> None:
        """
        Update Salesforce API with changes.
        :param model: {{ sobject.label }} object to update
        :param headers: headers to send with REST call
            https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/headers.htm
        """

        updates = model.model_dump_json(by_alias=True, exclude_unset=True, exclude_defaults=True, exclude_none=True)
        import json
        updates = json.loads(updates) # TODO - better way to do this?
        if updates:
            GUSClient.instance().sf.__getattr__("{{ sobject.name }}").update(
                model.id_, updates, headers=headers
            )
{% endif %}

    @classmethod
    def soql_query(
        cls, where_clause: str
    ) -> Generator[Self, None, None]:
        """
        Query {{ sobject.label_plural }} by SOQL WHERE clause.

        :param where_clause: where clause of SOQL query
        :yields: {{ sobject.label }} objects
        """
        for x in cls._query_soql("{{ sobject.name }}", where_clause):
            yield {{ sobject.label_capwords }}(**x)


