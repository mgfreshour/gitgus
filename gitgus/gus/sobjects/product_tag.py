"""Product Tag."""
# Do not Edit this file.
# This file is generated from the "gitgus dev generate-sobjects" command
#
# Remember, you can always regenerate this file by running the above command.
# If you have made changes to this file, they will be lost.
# Edit template: sobject.py.jinja2

from datetime import datetime
from enum import Enum
from typing import Any
from typing import Self
from typing import Dict
from typing import List
from typing import Optional
from typing import Generator

from pydantic import Field, ConfigDict, computed_field
from ..gus_client import GUSClient
from .sobject_base import SObjectBase, SObjectType


class CurrencyIsoCodeEnum(str, Enum):
    """Currency ISO Code."""

    OPTION_0 = "AUD"
    OPTION_1 = "GBP"
    OPTION_2 = "CAD"
    OPTION_3 = "EUR"
    OPTION_4 = "INR"
    OPTION_5 = "JPY"
    OPTION_6 = "SGD"
    OPTION_7 = "SEK"
    OPTION_8 = "USD"


class DefaultCategoryEnum(str, Enum):
    """Default Category."""

    OPTION_0 = "Engineering"
    OPTION_1 = "Non-Engineering"
    OPTION_2 = "Operations"


class ProductTag(SObjectBase, metaclass=SObjectType):
    """Product Tag."""

    _can_be_approved = True
    _base_sf_object = "ADM_Product_Tag__c"

    model_config = ConfigDict(
        title="ADM_Product_Tag__c",
        validate_assignment=True,
    )

    id_: str = Field(..., alias="Id", title="Record ID", frozen=True, exclude=True)
    owner_id: str = Field(..., alias="OwnerId", title="Owner ID")
    is_deleted: bool = Field(
        ..., alias="IsDeleted", title="Deleted", frozen=True, exclude=True
    )
    name: Optional[str] = Field(..., alias="Name", title="Product Tag Name")
    currency_iso_code: Optional[CurrencyIsoCodeEnum] = Field(
        ..., alias="CurrencyIsoCode", title="Currency ISO Code"
    )
    created_date: datetime = Field(
        ..., alias="CreatedDate", title="Created Date", frozen=True, exclude=True
    )
    created_by_id: str = Field(
        ..., alias="CreatedById", title="Created By ID", frozen=True, exclude=True
    )
    last_modified_date: datetime = Field(
        ...,
        alias="LastModifiedDate",
        title="Last Modified Date",
        frozen=True,
        exclude=True,
    )
    last_modified_by_id: str = Field(
        ...,
        alias="LastModifiedById",
        title="Last Modified By ID",
        frozen=True,
        exclude=True,
    )
    system_modstamp: datetime = Field(
        ..., alias="SystemModstamp", title="System Modstamp", frozen=True, exclude=True
    )
    may_edit: bool = Field(
        ..., alias="MayEdit", title="May Edit", frozen=True, exclude=True
    )
    is_locked: bool = Field(
        ..., alias="IsLocked", title="Is Locked", frozen=True, exclude=True
    )
    last_viewed_date: Optional[datetime] = Field(
        ..., alias="LastViewedDate", title="Last Viewed Date", frozen=True, exclude=True
    )
    last_referenced_date: Optional[datetime] = Field(
        ...,
        alias="LastReferencedDate",
        title="Last Referenced Date",
        frozen=True,
        exclude=True,
    )
    team_tag_key: Optional[str] = Field(
        ..., alias="Team_Tag_Key__c", title="Team Tag Key"
    )
    team: Optional[str] = Field(..., alias="Team__c", title="Team")
    use_for_automated_tools: Optional[bool] = Field(
        ..., alias="Use_for_Automated_Tools__c", title="Use for Automated Tools"
    )
    active: Optional[bool] = Field(..., alias="Active__c", title="Active")
    migration_mfa: Optional[str] = Field(
        ..., alias="Migration_MFA__c", title="Migration Major Functional Area"
    )
    migration_pa: Optional[str] = Field(
        ..., alias="Migration_PA__c", title="Migration Product Area"
    )
    description: Optional[str] = Field(..., alias="Description__c", title="Description")
    aof_area_of_focus: Optional[str] = Field(
        ...,
        alias="AOF_Area_of_Focus__c",
        title="Area of Focus",
        frozen=True,
        exclude=True,
    )
    assignment_rule: Optional[str] = Field(
        ...,
        alias="Assignment_Rule__c",
        title="Assignment Rule",
        frozen=True,
        exclude=True,
    )
    associated_url: Optional[str] = Field(
        ..., alias="Associated_URL__c", title="Associated URL"
    )
    service: Optional[str] = Field(..., alias="Service__c", title="Service")
    default_category: Optional[DefaultCategoryEnum] = Field(
        ..., alias="Default_Category__c", title="Default Category"
    )
    indexed_team_name: Optional[str] = Field(
        ..., alias="Indexed_Team_Name__c", title="Indexed Team Name"
    )
    adm_task_subject_values: Optional[str] = Field(
        ...,
        alias="ADM_Task_Subject_Values__c",
        title="Task Template Values",
        frozen=True,
        exclude=True,
    )

    @property
    def owner_name(self):
        return self._get_connected_object_name(["Group", "User"], self.owner_id)

    @property
    def created_by_name(self):
        return self._get_connected_object_name(["User"], self.created_by_id)

    @property
    def last_modified_by_name(self):
        return self._get_connected_object_name(["User"], self.last_modified_by_id)

    @property
    def team_name(self):
        return self._get_connected_object_name(["ADM_Scrum_Team__c"], self.team)

    @property
    def aof_area_of_focus_name(self):
        return self._get_connected_object_name(
            ["AOF_Area_of_Focus__c"], self.aof_area_of_focus
        )

    @property
    def assignment_rule_name(self):
        return self._get_connected_object_name(
            ["ADM_Assignment_Rule__c"], self.assignment_rule
        )

    @property
    def service_name(self):
        return self._get_connected_object_name(["Service__c"], self.service)

    def __init__(self, **kwargs: Any):
        """
        Initialize Salesforce Object.

        :param **kwargs: keyword arguments
        """
        super().__init__(**kwargs)

    @property
    def web_url(self) -> str:
        """
        Web URL.

        :returns: web url
        """
        return f"https://{GUSClient.instance().sf.sf_instance}/{self.id_}"

    @classmethod
    def get_by_id(cls, id_: str) -> Self:
        """
        Get product tag.

        :param id_: Salesforce Object Id
        :returns: Product Tag object
        """
        x = GUSClient.instance().sf.__getattr__("ADM_Product_Tag__c").get(id_)
        return ProductTag(**{"sf": GUSClient.instance().sf, **x})

    @classmethod
    def create(cls, **kwargs: Any) -> Self:
        """
        Create product tag.
        :param **kwargs: values for the fields of the Product Tag object
        :returns: Product Tag object
        :raises RuntimeError: if object creation failed
        """
        lookup = cls._get_field_to_sf_name_dict()
        fields = {lookup[k]: v for k, v in kwargs.items()}
        return cls._create("FeedItem", fields)

    @classmethod
    def update(cls, model: Self, headers: Optional[Dict[str, str]] = None) -> None:
        """
        Update Salesforce API with changes.
        :param model: Product Tag object to update
        :param headers: headers to send with REST call
            https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/headers.htm
        """

        updates = model.model_dump_json(
            by_alias=True, exclude_unset=True, exclude_defaults=True, exclude_none=True
        )
        import json

        updates = json.loads(updates)  # TODO - better way to do this?
        if updates:
            GUSClient.instance().sf.__getattr__("ADM_Product_Tag__c").update(
                model.id_, updates, headers=headers
            )

    @classmethod
    def soql_query(cls, where_clause: str) -> Generator[Self, None, None]:
        """
        Query Product Tags by SOQL WHERE clause.

        :param where_clause: where clause of SOQL query
        :yields: Product Tag objects
        """
        for x in cls._query_soql("ADM_Product_Tag__c", where_clause):
            yield ProductTag(**x)
